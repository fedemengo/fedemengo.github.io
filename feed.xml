<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://fedemengo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fedemengo.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-04-25T13:55:14+00:00</updated><id>https://fedemengo.github.io/feed.xml</id><title type="html">fedemengo</title><entry><title type="html">How I made nvim 300x faster</title><link href="https://fedemengo.github.io/blog/2023/04/nvim-evil-regex/" rel="alternate" type="text/html" title="How I made nvim 300x faster" /><published>2023-04-23T00:00:00+00:00</published><updated>2023-04-23T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2023/04/nvim-evil-regex</id><content type="html" xml:base="https://fedemengo.github.io/blog/2023/04/nvim-evil-regex/"><![CDATA[<h2 id="intro">Intro</h2>

<p>For a while, I’ve been working on a side <a href="https://github.com/fedemengo/d2bist">project</a> that generates files with many 0s and 1s. As nvim is my primary editor, I frequently need to check or modify the contents of these files. However, to my great annoyance, whenever the files contained more than, let’s say, tens of thousands of bit characters, nvim would hang for several seconds, minutes, or until I would SIGKILL it.</p>

<p>This kept happening, so I tried opening the same file with plain vim and to my surprise, the file would open up instantly. There had to be something wrong with my config, I thought. After all, adding more and more plugins to nvim undoubtedly makes the editor heavier and slower. It was time to find out where the problem was.</p>

<h2 id="how">How</h2>

<p>I never had to debug performance issues in nvim before, so I didn’t really have much to start with. My first suspicion was that the slow down was cause by some plugins. I tried to binary-search the plugin causing problems but even without plugins opening up that file was still slow.</p>

<p>I didn’t havy many other ideas, looking at the helper I discovered the <code class="language-plaintext highlighter-rouge">--startuptime</code> flag. Since I didn’t want to mess up my configuration I launched a docker container, clone and compile nvim. I made sure the problem was still present in the version from master and created an empty <code class="language-plaintext highlighter-rouge">init.lua</code>.</p>

<p>Finally I launched</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ff1d74dcbc84:~# <span class="nb">time </span>nvim /test/data/data/pi_30_000 <span class="nt">--startuptime</span> vim-startup.log +qall

real    0m6.142s
user    0m6.123s
sys     0m0.010s
</code></pre></div></div>

<p>which generated</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>times in msec
 clock   self+sourced   self:  sourced script
 clock   elapsed:              other lines

000.013  000.013: --- NVIM STARTING ---
001.096  001.084: event init
001.994  000.897: early init
002.122  000.129: locale set
002.560  000.438: init first window
003.937  001.377: inits 1
003.996  000.058: window checked
....
018.257  000.129  000.129: sourcing /usr/share/nvim/runtime/plugin/man.lua
018.271  002.238: loading rtp plugins
018.389  000.118: loading packages
018.676  000.287: loading after plugins
018.687  000.011: inits 3
019.861  001.174: reading ShaDa
027.129  001.244  001.244: require('vim.filetype')
029.058  001.187  001.187: require('vim.filetype.detect')
6048.212  000.048  000.048: sourcing /usr/share/nvim/runtime/scripts.vim
6048.316  6025.976: opening buffers
6048.352  000.036: BufEnter autocommands
6048.355  000.003: editing files in windows
</code></pre></div></div>

<p>Looking at the logs, it’s clear that something bad happened between <code class="language-plaintext highlighter-rouge">029.058</code> and <code class="language-plaintext highlighter-rouge">6048.212</code>. In particular, <code class="language-plaintext highlighter-rouge">require('vim.filetype.detect')</code> took \(\approx 6\) seconds.</p>

<p>Armed with <code class="language-plaintext highlighter-rouge">rg</code> and <code class="language-plaintext highlighter-rouge">fd</code>, after some code diving, I understood what that line did. As the name suggests, it’s used to infer the file type. There are a couple of ways nvim infers the file type. In case it’s not obvious from the extension, it first checks for <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebangs</a> and, if necessary, it attempts to guess the filetype from the file content.</p>

<p>And that’s where my problem was. The file contents are fed to a set of regex that, in case of a successful match, assigns a known filetype. For most of the regex, it’s enough to test the first few lines of the file content. In my case, the file was a single long line of characters (30k to be exact). So my first idea was to limit the line each regex has to test to some “reasonable” upper bound, I think I set 1000.</p>

<p>So I changed that, recompiled nvim, and opened up the file again.</p>

<p>Yep, the fix worked!</p>

<p>I pushed the fix and opened a PR. After some time, a nvim core maintainer had a chance to look at the fix and mentioned that nvim logic matches vim’s one. So to prevent any major divergence between the two, they suggested I push the fix to vim first, and in case it was accepted, they would port it to nvim. I think that’s only fair.</p>

<p>But could I really push that fix to vim? After all, vim didn’t suffer from this, so it seemed unreasonable to cap the file content to solve performance problems that were not there. I wanted to fix the issue where it made more sense.</p>

<p>After some rubber ducking with ChatGPT and some looking around the internet, I read that vim regex engine is particularly efficient. Nvim, on the other hand, uses Lua’s builtin regex. Could it be that the two had this magnitude of performance difference? Only one way to find out. Let’s write some code to test it.</p>

<p>So I basically rewrote <a href="https://github.com/neovim/neovim/blob/53f36806f1b5107c0570ffbf57180a8e08f45b2e/runtime/lua/vim/filetype/detect.lua#L1660">this</a> into a script</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">local</span> <span class="n">patterns_text</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"^#compdef\\&gt;"</span><span class="p">,</span>
    <span class="s2">"^#autoload\\&gt;"</span><span class="p">,</span>
    <span class="s2">"^From [a-zA-Z][a-zA-Z_0-9%.=%-]*(@[^ ]*)? .* 19%d%d$"</span><span class="p">,</span>
    <span class="s2">"^From [a-zA-Z][a-zA-Z_0-9%.=%-]*(@[^ ]*)? .* 20%d%d$"</span><span class="p">,</span>
    <span class="s2">"^From %- .* 19%d%d$"</span><span class="p">,</span>
    <span class="s2">"^From %- .* 20%d%d$"</span><span class="p">,</span>
    <span class="s2">"^&lt;[%%&amp;].*&gt;"</span><span class="p">,</span>
    <span class="s1">'^" *[vV]im$['</span><span class="p">,</span>
    <span class="s2">"%-%*%-.*[cC]%+%+.*%-%*%-"</span><span class="p">,</span>
    <span class="s2">"^\\*\\* LambdaMOO Database, Format Version \\%([1-3]\\&gt;\\)\\@!\\d\\+ \\*\\*$"</span><span class="p">,</span>
    <span class="s2">"^\\(diff\\&gt;\\|Only in \\|\\d\\+\\(,\\d\\+\\)\\=[cda]\\d\\+\\&gt;\\|# It was generated by makepatch \\|Index:\\s\\+\\f\\+\\r\\=$\\|===== \\f\\+ \\d\\+\\.\\d\\+ vs edited\\|==== //\\f\\+#\\d\\+\\|# HG changeset patch\\)"</span><span class="p">,</span>
    <span class="s2">"^%%![ \t]*PS"</span><span class="p">,</span>
    <span class="s2">"^ *proc[nd] *$"</span><span class="p">,</span>
    <span class="s2">"^%*%*%*%*  Purify"</span><span class="p">,</span>
    <span class="s2">"&lt;%?%s*xml.*%?&gt;"</span><span class="p">,</span>
    <span class="s2">"</span><span class="se">\\</span><span class="s2">&lt;DTD\\s\\+XHTML\\s"</span><span class="p">,</span>
    <span class="s2">"</span><span class="se">\\</span><span class="s2">c&lt;!DOCTYPE\\s\\+html\\&gt;"</span><span class="p">,</span>
    <span class="s2">"^%%PDF%-"</span><span class="p">,</span>
    <span class="s2">"^%x%x%x%x%x%x%x: %x%x ?%x%x ?%x%x ?%x%x "</span><span class="p">,</span>
    <span class="s2">"^RCS file:"</span><span class="p">,</span>
    <span class="s2">"^CVS:"</span><span class="p">,</span>
    <span class="s2">"^CVS: "</span><span class="p">,</span>
    <span class="s2">"^!R!"</span><span class="p">,</span>
    <span class="s2">"^SEND%-PR:"</span><span class="p">,</span>
    <span class="s2">"^SNNS network definition file"</span><span class="p">,</span>
    <span class="s2">"^SNNS pattern definition file"</span><span class="p">,</span>
    <span class="s2">"^SNNS result file"</span><span class="p">,</span>
    <span class="s2">"^%%.-[Vv]irata"</span><span class="p">,</span>
    <span class="s2">"[0-9:%.]* *execve%("</span><span class="p">,</span>
    <span class="s2">"^__libc_start_main"</span><span class="p">,</span>
    <span class="s2">"^\\* $$ JOB\\&gt;"</span><span class="p">,</span>
    <span class="s2">"^// *JOB\\&gt;"</span><span class="p">,</span>
    <span class="s2">"K &amp; K  Associates"</span><span class="p">,</span>
    <span class="s2">"TAK 2000"</span><span class="p">,</span>
    <span class="s2">"S Y S T E M S   I M P R O V E D "</span><span class="p">,</span>
    <span class="s2">"Run Date: "</span><span class="p">,</span>
    <span class="s2">"Node    File  1"</span><span class="p">,</span>
    <span class="s2">"^==%d+== valgrind"</span><span class="p">,</span>
    <span class="s2">"^==%d+== Using valgrind"</span><span class="p">,</span>
    <span class="s2">"PACKAGE DOCUMENTATION$"</span><span class="p">,</span>
    <span class="s2">"^##RenderMan"</span><span class="p">,</span>
    <span class="s2">"exec%s%+%S*scheme"</span><span class="p">,</span>
    <span class="s2">"^\\(commit\\|tree\\|object\\) \\x\\{40,\\}\\&gt;\\|^tag \\S\\+$"</span><span class="p">,</span>
    <span class="s2">"%-%*%-.*erlang.*%-%*%-"</span><span class="p">,</span>
    <span class="s2">"^%%YAML"</span><span class="p">,</span>
    <span class="s2">"^#.*by RouterOS"</span><span class="p">,</span>
    <span class="s2">"^#n%s"</span><span class="p">,</span>
    <span class="s2">"^#n$"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">match_from_text</span><span class="p">(</span><span class="n">contents</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">patterns_text</span> <span class="k">do</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">patterns_text</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="nb">next</span> <span class="o">=</span> <span class="s2">""</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="o">#</span><span class="n">patterns_text</span> <span class="k">then</span>
            <span class="nb">next</span> <span class="o">=</span> <span class="n">patterns_text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">end</span>
        <span class="kd">local</span> <span class="n">start_time</span> <span class="o">=</span> <span class="nb">os.clock</span><span class="p">()</span>
        <span class="n">contents</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="n">find</span><span class="p">(</span><span class="n">curr</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">elapsed_time</span> <span class="o">=</span> <span class="p">(</span><span class="nb">os.clock</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="s2">"curr: '%s', Time: %.3fs. next: '%s'"</span><span class="p">,</span> <span class="n">curr</span><span class="p">,</span> <span class="n">elapsed_time</span><span class="p">,</span> <span class="nb">next</span><span class="p">))</span>
	<span class="k">end</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">file</span> <span class="o">=</span> <span class="nb">io.open</span><span class="p">(</span><span class="n">arg</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">"r"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">file</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"file not found"</span><span class="p">)</span>
<span class="k">else</span>
    <span class="kd">local</span> <span class="n">content</span> <span class="o">=</span> <span class="n">file</span><span class="p">:</span><span class="n">read</span><span class="p">(</span><span class="s2">"*all"</span><span class="p">)</span>
    <span class="n">file</span><span class="p">:</span><span class="n">close</span><span class="p">()</span>
    <span class="n">match_from_text</span><span class="p">({</span><span class="n">content</span><span class="p">})</span>
<span class="k">end</span>
</code></pre></div></div>

<p>and run it against the file that was causing me problems <code class="language-plaintext highlighter-rouge">lua test.lua pi_30_000</code></p>

<p>Soon enough I had found the problematic regex</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curr: '^RCS file:', Time: 0.000s. next: '^CVS:'
curr: '^CVS:', Time: 0.000s. next: '^CVS: '
curr: '^CVS: ', Time: 0.000s. next: '^!R!'
curr: '^!R!', Time: 0.000s. next: '^SEND%-PR:'
curr: '^SEND%-PR:', Time: 0.000s. next: '^SNNS network definition file'
curr: '^SNNS network definition file', Time: 0.000s. next: '^SNNS pattern definition file'
curr: '^SNNS pattern definition file', Time: 0.000s. next: '^SNNS result file'
curr: '^SNNS result file', Time: 0.000s. next: '^%%.-[Vv]irata'
curr: '^%%.-[Vv]irata', Time: 0.000s. next: '[0-9:%.]* *execve%('

curr: '[0-9:%.]* *execve%(', Time: 4.408s. next: '^__libc_start_main'

curr: '^__libc_start_main', Time: 0.000s. next: '^\* $$ JOB\&gt;'
curr: '^\* $$ JOB\&gt;', Time: 0.000s. next: '^// *JOB\&gt;'
curr: '^// *JOB\&gt;', Time: 0.000s. next: 'K &amp; K  Associates'
curr: 'K &amp; K  Associates', Time: 0.000s. next: 'TAK 2000'
curr: 'TAK 2000', Time: 0.000s. next: 'S Y S T E M S   I M P R O V E D '
curr: 'S Y S T E M S   I M P R O V E D ', Time: 0.000s. next: 'Run Date: '
</code></pre></div></div>

<p>The regex <code class="language-plaintext highlighter-rouge">[0-9:%.]* *execve%(</code> equivalent to <code class="language-plaintext highlighter-rouge">[0-9:.]* *execve(</code> without regex escape chars took \(\approx 4.4\) seconds to evaluate, which is crazy considering all the other regexes evaluated instantly. I’m no expert in regexes but I think the issues is with a backtracking explosion. Remember the <a href="https://en.wikipedia.org/wiki/String-searching_algorithm#Naive_string_search">naive string searching</a>?</p>

<p>Anyway, the trend was close to quadratic, on paper the regex had to perform \(\sum_{i=1}^N i = \frac{N(N+1)}{2} = O(N^2)\) matches.</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/2023-04-23/nvim-plot-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/2023-04-23/nvim-plot-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/2023-04-23/nvim-plot-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/2023-04-23/nvim-plot.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>I spent some time trying to understand why it was written that way, after all <code class="language-plaintext highlighter-rouge">[0-9:.]* *execve(</code> is equivalent to <code class="language-plaintext highlighter-rouge">execve(</code> given that both <code class="language-plaintext highlighter-rouge">[0-9:.]</code> and <code class="language-plaintext highlighter-rouge">\s</code> are matched zero or more times, so they don’t really matter. This would not have been the case if the regex had been anchored.</p>

<p>Finally! Something is actually wrong (in vim too) and should be fixed.</p>

<p>I gave it a shot with the simplified regex. Comparing the time to open up the file before the fix</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ff1d74dcbc84:~# <span class="nb">time </span>nvim /test/data/data/pi_30_000 +qall

real    0m6.142s
user    0m6.123s
sys     0m0.010s
</code></pre></div></div>

<p>and after the fix</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ff1d74dcbc84:~# <span class="nb">time </span><span class="nv">VIMRUNTIME</span><span class="o">=</span>/neovim/runtime/ /neovim/build/bin/nvim /test/data/data/pi_30_000 +qall

real    0m0.021s
user    0m0.014s
sys     0m0.000s
</code></pre></div></div>
<p>just awesome.</p>

<p>I updated the PR in nvim and opened a PR in vim with the simplified version of the regex. I also noticed that the very same regex had undergone some changes and it also used to be anchored. I think somewhere along the line an edit wasn’t really equivalent, so I added a test to prevent future regressions. You know, just for good measure.</p>

<p>After some <a href="https://github.com/vim/vim/pull/12220">back and forth</a> with @brammool on how to tackle this, I ended up with a fix that eventually got <a href="https://github.com/vim/vim/commit/6e5a9f948221b52caaaf106079cb3430c4dd7c77">accepted</a> into vim codebase and <a href="https://github.com/neovim/neovim/commit/6d9f5b6bf0fc324b33ce01f74a6030c9271b1a01">ported</a> into nvim.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	 || line4 =~ '^%.\{-}[Vv]irata'
	 || line5 =~ '^%.\{-}[Vv]irata'
    set ft=virata
<span class="err">
</span>    # Strace
<span class="gd">-  elseif line1 =~ '[0-9:.]* *execve(' || line1 =~ '^__libc_start_main'
</span><span class="gi">+    # inaccurate fast match first, then use accurate slow match
+  elseif (line1 =~ 'execve(' &amp;&amp; line1 =~ '^[0-9:.]* *execve(')
+	   || line1 =~ '^__libc_start_main'
</span>    set ft=strace
<span class="err">
</span>    # VSE JCL
    elseif line1 =~ '^\* $$ JOB\&gt;' || line1 =~ '^// *JOB\&gt;'
</code></pre></div></div>
<p>Now that I look at it I think <code class="language-plaintext highlighter-rouge">^[0-9:.]* *execve(</code> was enough to guarantee optimal performances and correctness, but whatever.</p>

<p>And that folks, is how I made nvim \(6.142 / 0.021 = 292.48 \approx 300\) times faster ;)</p>

<h2 id="conclusion">Conclusion</h2>

<p>This was an interesting and fun exercise in troubleshooting.</p>

<p>It made me appreciate open source and hate regex even more! After this was done I started to wonder if a tool to <a href="https://en.wikipedia.org/wiki/NFA_minimization">simplify</a> regexes exists and how <a href="https://cstheory.blogoverflow.com/2011/08/on-learning-regular-languages/">difficult</a> it would be to make one. Maybe I’ll give it a shot.</p>

<p>Another interesting way to investigate slow downs in nvim that I found is <a href="https://github.com/stevearc/profile.nvim">this</a> amazing profiling plugin. In case <code class="language-plaintext highlighter-rouge">--startuptime</code> doesn’t give enough or any actionable information.</p>]]></content><author><name></name></author><category term="debugging" /><category term="vim" /><category term="nvim" /><category term="regex" /><summary type="html"><![CDATA[Tracking down an evil regex in vim and neovim]]></summary></entry><entry><title type="html">Visualizing cellular automata</title><link href="https://fedemengo.github.io/blog/2022/10/visualizing-cellular-automata/" rel="alternate" type="text/html" title="Visualizing cellular automata" /><published>2022-10-28T00:00:00+00:00</published><updated>2022-10-28T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2022/10/visualizing-cellular-automata</id><content type="html" xml:base="https://fedemengo.github.io/blog/2022/10/visualizing-cellular-automata/"><![CDATA[<script>

let renderModels = (models, darkTheme) => {
    for(let model of models) {
        // get the parent element of the viewer
        let parentDiv = document.getElementById (model.id);
        if(parentDiv.hasChildNodes()) {
            parentDiv.removeChild(parentDiv.firstChild)
        }

        // initialize the viewer with the parent element and some parameters
        let viewer = new OV.EmbeddedViewer(parentDiv, {
            backgroundColor : new OV.RGBAColor(255, 255, 255, 0),
            defaultColor : new OV.RGBColor(127, 127, 127),
            edgeSettings : {
                showEdges : true,
                edgeColor : new OV.RGBAColor(0, 0, 0, 1),
                edgeThreshold : 0.5
            },
            environmentSettings : {
                environmentMap : [],
                backgroundIsEnvMap : false
            },
            onModelLoaded : () => {
                let model = viewer.GetModel ();
            }
        });

        viewer.viewer.SetFixUpVector (false);
        viewer.LoadModelFromUrlList ([
            model.m,
            "/assets/models/automata.mtl"
        ]);
    }
}

window.addEventListener('load', () => {
    darkTheme = window.__theme__ == 'dark'
    renderModels([
        {"m": "/assets/models/rule30.obj", "cap": "rule 30", "id": "viewer-rule-30"},
        {"m": "/assets/models/rule110.obj", "cap": "rule 110", "id": "viewer-rule-110"},
        {"m": "/assets/models/rule169.obj", "cap": "rule 169", "id": "viewer-rule-169"},
        {"m": "/assets/models/code422.obj", "cap": "code 422", "id": "viewer-code-422"},
        {"m": "/assets/models/code460.obj", "cap": "code 460", "id": "viewer-code-460"},
    ], darkTheme)
});

</script>

<p>In this post I plan to set the scene for a nice visualization of cellular automata and pretty much anything else.</p>

<p>The idea is basically a mix of Github ability to preview <code class="language-plaintext highlighter-rouge">.stl</code> 3d files and the illustration in Wolfram’s “A new kind of science”.</p>

<p>Bulding on what I did in the previos post, once the run for a CA rule has been generate, it’s easy to manipulare the bits and generate vertexes and faces of the 3d figure (in this case the format is <a href="https://en.wikipedia.org/wiki/Wavefront_.obj_file">.obj</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="kn">import</span> <span class="n">import_ipynb</span>
<span class="kn">from</span> <span class="n">automata_generation</span> <span class="kn">import</span> <span class="n">generate</span><span class="p">,</span> <span class="n">plot_run</span><span class="p">,</span> <span class="n">make_columns</span>

<span class="c1"># manually specify the logic to map a cube face to 4 of its 8 vertexes
</span><span class="k">def</span> <span class="nf">face</span><span class="p">(</span><span class="n">face</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">face</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">'f </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">2</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">4</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">3</span><span class="si">}</span><span class="s">'</span>
    <span class="k">elif</span> <span class="n">face</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">'f </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">2</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">6</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">5</span><span class="si">}</span><span class="s">'</span>
    <span class="k">elif</span> <span class="n">face</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">'f </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">2</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">6</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">8</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">4</span><span class="si">}</span><span class="s">'</span>
    <span class="k">elif</span> <span class="n">face</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">'f </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">3</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">4</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">8</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">7</span><span class="si">}</span><span class="s">'</span>
    <span class="k">elif</span> <span class="n">face</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">'f </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">5</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">7</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">3</span><span class="si">}</span><span class="s">'</span>
    <span class="k">elif</span> <span class="n">face</span> <span class="o">==</span> <span class="mi">6</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">'f </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">5</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">6</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">8</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">count</span><span class="o">+</span><span class="mi">7</span><span class="si">}</span><span class="s">'</span>

<span class="k">def</span> <span class="nf">generate_cell</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">count</span> <span class="o">*</span> <span class="mi">8</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s">'g cell</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="s">'usemtl Red</span><span class="se">\n</span><span class="s">'</span><span class="p">]</span>
    <span class="n">vertex</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">di</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">dj</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]:</span>
            <span class="k">for</span> <span class="n">dz</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="n">vertex</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="s">'v </span><span class="si">{</span><span class="n">j</span><span class="o">+</span><span class="n">dj</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="n">di</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">z</span><span class="o">+</span><span class="n">dz</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">vertex</span><span class="p">:</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">face</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">start</span><span class="p">)</span> <span class="o">+</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">writelines</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">create_3d_obj</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">rule</span><span class="si">}</span><span class="s">.obj'</span>
    <span class="nb">file</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">writelines</span><span class="p">([</span><span class="s">"mtllib automata.mtl</span><span class="se">\n</span><span class="s">"</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1"># 0 or 1 depending on the CA
</span>                <span class="nf">generate_cell</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">filename</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rule</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">size</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">steps</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">start</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
<span class="n">start</span><span class="p">[</span><span class="mi">45</span><span class="p">:</span><span class="mi">55</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">data</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">steps</span><span class="p">,</span> <span class="n">with_init</span><span class="o">=</span><span class="n">start</span><span class="p">)</span>

<span class="nf">create_3d_obj</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'30.obj'
</code></pre></div></div>

<p>And here’s the result</p>

<div id="viewer-rule-30" style="width: 800px; height: 600px;"></div>
<div class="caption">rule 30</div>

<div id="viewer-rule-110" style="width: 800px; height: 600px;"></div>
<div class="caption">rule 110</div>

<div id="viewer-rule-169" style="width: 800px; height: 600px;"></div>
<div class="caption">rule 169</div>

<p>This gets even more cool with 2D CA</p>

<div id="viewer-code-422" style="width: 800px; height: 600px;"></div>
<div class="caption">code 422</div>

<div id="viewer-code-460" style="width: 800px; height: 600px;"></div>
<div class="caption">code 460</div>

<p>Coming soon:</p>

<p>I’m no expert on 3d visualization but I think the reason the figures are a bit laggy, especially if they are large enough, is that each CA cell is its own figure. One optimization that I’ll try to implement in the future is to merge all adjacent cells into one figure (this mean that all non-edge vertex can be removed and several faces merged together).</p>

<p>I’ll probably need to use use <a href="https://en.wikipedia.org/wiki/Strongly_connected_component">SCC</a> to undersand which cells should be merged together. The tricky thing will probably be specifying the vertexes for such non regular faces (since the list of vertex needs to be ordered - in general counter clock wise). I will probably need to used some idea from the <a href="https://en.wikipedia.org/wiki/Convex_hull">convex hull</a> to specify such ordering.</p>

<p>It should be fun</p>]]></content><author><name></name></author><category term="computation" /><category term="automata" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Poincaré recurrence time in cellular automata</title><link href="https://fedemengo.github.io/blog/2022/10/poincare-recurrence-time/" rel="alternate" type="text/html" title="Poincaré recurrence time in cellular automata" /><published>2022-10-27T00:00:00+00:00</published><updated>2022-10-27T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2022/10/poincare-recurrence-time</id><content type="html" xml:base="https://fedemengo.github.io/blog/2022/10/poincare-recurrence-time/"><![CDATA[<p>From wikipedia:</p>
<blockquote>
  <p>The Poincaré recurrence theorem states that certain dynamical systems will, after a sufficiently long but finite time, return to a state arbitrarily close to (for continuous state systems), or exactly the same as (for discrete state systems), their initial state.</p>

  <p>The Poincaré recurrence time is the length of time elapsed until the recurrence. This time may vary greatly depending on the exact initial state and required degree of closeness.</p>
</blockquote>

<p>Cellular automata are clearly discrete system. We can measure the Poincaré recurrence (PR) time in terms of steps (we can consider 1 step equivalent to 1 unit of time). It’s enough to check if at any given step we enter in a state already seen. It’s necessary to store each state seen (an entry in a dictionary) and check for evaluation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">import_ipynb</span>
<span class="kn">from</span> <span class="n">automata_generation</span> <span class="kn">import</span> <span class="n">generate</span><span class="p">,</span> <span class="n">plot_run</span><span class="p">,</span> <span class="n">make_columns</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>importing Jupyter notebook from automata_generation.ipynb
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_recurrence</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">tobytes</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">i</span><span class="o">-</span><span class="n">steps</span><span class="p">[</span><span class="n">row</span><span class="p">]</span>
        <span class="n">steps</span><span class="p">[</span><span class="n">row</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">steps</span><span class="p">)</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_recurrence_upperbound</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">step_limit</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
    <span class="n">xs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">empty</span><span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">ub</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">xs</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="n">ub</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">idx</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">step_limit</span><span class="p">,</span> <span class="n">test_recurrence</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exit_on_recurrence</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">idx</span> <span class="o">!=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">d</span> <span class="o">=</span> <span class="n">idx</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">steps</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">log2</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">steps</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">return</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ub</span><span class="p">,</span> <span class="n">steps</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">,</span> <span class="n">recurrence_indices</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">test_recurrence</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exit_on_recurrence</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="nf">find_recurrence</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_recurrence_match</span><span class="p">(</span><span class="n">recurrence_indices</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">recurrence_indices</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"recurrence was not found"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">(</span>
        <span class="p">(</span>
            <span class="n">x</span><span class="p">[</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">recurrence_indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span><span class="n">recurrence_indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">][:],</span>
            <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]))],</span>
            <span class="n">x</span><span class="p">[</span><span class="n">recurrence_indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="nf">min</span><span class="p">(</span><span class="n">recurrence_indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)][:]</span>
        <span class="p">),</span>
        <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="nf">plot_run</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_recurrence_match</span><span class="p">(</span><span class="n">recurrence_indices</span><span class="p">)</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_8_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_8_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_8_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_8_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>It could be interesting to see poincare recurrence for each rule. Let’s calculate the PR for each rule, with size in $[1…K]$ and a maximum number of step N and see what kind of trend we get for each rule.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>

<span class="n">colorize</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vectorize</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">'red'</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="s">'green'</span><span class="p">)</span>
<span class="n">execution_time</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">step_limit</span> <span class="o">=</span> <span class="mi">20000</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">clf</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'rule </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">xs</span><span class="p">,</span> <span class="n">ub</span><span class="p">,</span> <span class="n">steps</span> <span class="o">=</span> <span class="nf">plot_recurrence_upperbound</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">step_limit</span><span class="o">=</span><span class="n">step_limit</span><span class="p">)</span>
        <span class="n">end</span> <span class="o">=</span>  <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">execution_time</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
        <span class="c1">#plt.rcParams["figure.figsize"]=10,10
</span>        <span class="c1">#plt.plot(xs, ub)
</span>        <span class="c1">#plt.scatter(xs, steps, marker='.', c=colorize(steps))
</span>        <span class="c1">#plt.show()
</span>        <span class="c1">#plt.savefig(f"rule-{r}_{step_limit}steps.png")
</span><span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"aborted"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>

<span class="n">execution_time</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">execution_time</span><span class="p">[:</span><span class="mi">20</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"rule</span><span class="si">{</span><span class="n">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s"> took </span><span class="si">{</span><span class="n">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rule 0
	 0.014295816421508789
rule 1
	 0.014110088348388672
rule 2
	 0.06731963157653809
rule 3
	 0.13080883026123047
rule 4
	 0.009865045547485352
rule 5
	 0.010412931442260742
rule 6
	 0.08333683013916016
rule 7
	 0.011668920516967773
rule 8
	 0.007643938064575195
rule 9
	 0.09536623954772949
rule 10
	 0.06816911697387695
rule 11
	 0.09696221351623535
rule 12
	 0.011855125427246094
rule 13
	 0.05993509292602539
rule 14
	 0.06050300598144531
rule 15
	 0.08336710929870605
rule 16
	 0.05897998809814453
rule 17
	 0.11812114715576172
rule 18
	 0.6909589767456055
rule 19
	 0.014127016067504883
rule 20
	 0.0891580581665039
rule 21
	 0.013031959533691406
rule 22
	 0.09264206886291504
rule 23
	 0.018725872039794922
rule 24
	 0.0650792121887207
rule 25
	 0.14934778213500977
rule 26
	 0.97776198387146
rule 27
	 0.1139979362487793
rule 28
	 0.054821014404296875
rule 29
	 0.011471986770629883
rule 30
	 26.5013108253479
rule 31
	 0.019721031188964844
rule 32
	 0.013998746871948242
rule 33
	 0.01690983772277832
rule 34
	 0.10316276550292969
rule 35
	 0.23908495903015137
rule 36
	 0.016974687576293945
rule 37
	 0.04945206642150879
rule 38
	 0.16737580299377441
rule 39
	 0.20819401741027832
rule 40
	 0.015106916427612305
rule 41
	 0.2780458927154541
rule 42
	 0.10079574584960938
rule 43
	 0.15611600875854492
rule 44
	 0.014432191848754883
rule 45
	 29.741049766540527
rule 46
	 0.06091904640197754
rule 47
	 0.08320116996765137
rule 48
	 0.05670809745788574
rule 49
	 0.11656785011291504
rule 50
	 0.031477928161621094
rule 51
	 0.00950002670288086
rule 52
	 0.08253312110900879
rule 53
	 0.11395692825317383
rule 54
	 0.041037797927856445
rule 55
	 0.009826183319091797
rule 56
	 0.06255269050598145
rule 57
	 0.10928201675415039
rule 58
	 0.061155080795288086
rule 59
	 0.10793924331665039
rule 60
	 8.379151105880737
rule 61
	 0.12112307548522949
rule 62
	 0.0664830207824707
rule 63
	 0.010135173797607422
rule 64
	 0.008372068405151367
rule 65
	 0.09740424156188965
rule 66
	 0.06685113906860352
rule 67
	 0.11491107940673828
rule 68
	 0.007071018218994141
rule 69
	 0.05895090103149414
rule 70
	 0.05468010902404785
rule 71
	 0.010773181915283203
rule 72
	 0.008522987365722656
rule 73
	 0.2297210693359375
rule 74
	 0.06133317947387695
rule 75
	 31.90888786315918
rule 76
	 0.008646249771118164
rule 77
	 0.029652833938598633
rule 78
	 0.05922889709472656
rule 79
	 0.05463671684265137
rule 80
	 0.06371021270751953
rule 81
	 0.09065103530883789
rule 82
	 0.9790999889373779
rule 83
	 0.11075472831726074
rule 84
	 0.06128096580505371
rule 85
	 0.12448692321777344
rule 86
	 26.123712062835693
rule 87
	 0.012782096862792969
rule 88
	 0.05713701248168945
rule 89
	 30.4510018825531
rule 90
	 4.750530004501343
rule 91
	 0.015636920928955078
rule 92
	 0.06093168258666992
rule 93
	 0.06131482124328613
rule 94
	 0.03467392921447754
rule 95
	 0.011383056640625
rule 96
	 0.008281230926513672
rule 97
	 0.16131186485290527
rule 98
	 0.06476068496704102
rule 99
	 0.09926390647888184
rule 100
	 0.010210990905761719
rule 101
	 29.457420825958252
rule 102
	 8.820180892944336
rule 103
	 0.11405014991760254
rule 104
	 0.007352113723754883
rule 105
	 6.224099159240723
rule 106
	 0.11618804931640625
rule 107
	 0.3177459239959717
rule 108
	 0.0222320556640625
rule 109
	 0.23206615447998047
rule 110
	 1.3274178504943848
rule 111
	 0.10014700889587402
rule 112
	 0.062280893325805664
rule 113
	 0.11414384841918945
rule 114
	 0.07397580146789551
rule 115
	 0.11969828605651855
rule 116
	 0.06546783447265625
rule 117
	 0.092742919921875
rule 118
	 0.0684971809387207
rule 119
	 0.010839223861694336
rule 120
	 0.07424807548522949
rule 121
	 0.17499327659606934
rule 122
	 0.40232205390930176
rule 123
	 0.01334381103515625
rule 124
	 1.1915581226348877
rule 125
	 0.10111403465270996
rule 126
	 0.742887020111084
rule 127
	 0.013633012771606445
rule 128
	 0.011010169982910156
rule 129
	 0.7216980457305908
rule 130
	 0.07665300369262695
rule 131
	 0.08456707000732422
rule 132
	 0.008452177047729492
rule 133
	 0.05306386947631836
rule 134
	 0.09484601020812988
rule 135
	 26.81414794921875
rule 136
	 0.00937199592590332
rule 137
	 1.0686559677124023
rule 138
	 0.0604400634765625
rule 139
	 0.05618906021118164
rule 140
	 0.007270097732543945
rule 141
	 0.052774906158447266
rule 142
	 0.06703519821166992
rule 143
	 0.06638312339782715
rule 144
	 0.05845022201538086
rule 145
	 0.07192397117614746
rule 146
	 0.6040017604827881
rule 147
	 0.0495760440826416
rule 148
	 0.09687376022338867
rule 149
	 28.464774131774902
rule 150
	 5.020642042160034
rule 151
	 0.008892059326171875
rule 152
	 0.06734585762023926
rule 153
	 9.347355127334595
rule 154
	 1.0050771236419678
rule 155
	 0.08692622184753418
rule 156
	 0.06453824043273926
rule 157
	 0.07854413986206055
rule 158
	 0.11428189277648926
rule 159
	 0.009076118469238281
rule 160
	 0.008481979370117188
rule 161
	 0.7498009204864502
rule 162
	 0.05953097343444824
rule 163
	 0.08424711227416992
rule 164
	 0.0076100826263427734
rule 165
	 4.555773973464966
rule 166
	 0.10415410995483398
rule 167
	 1.0875978469848633
rule 168
	 0.008850812911987305
rule 169
	 22.293861865997314
rule 170
	 0.06535601615905762
rule 171
	 0.060491085052490234
rule 172
	 0.008649110794067383
rule 173
	 0.05925178527832031
rule 174
	 0.06543493270874023
rule 175
	 0.05765032768249512
rule 176
	 0.06086015701293945
rule 177
	 0.08470869064331055
rule 178
	 0.043411970138549805
rule 179
	 0.03549790382385254
rule 180
	 0.09203505516052246
rule 181
	 0.9599258899688721
rule 182
	 0.6476240158081055
rule 183
	 0.00801396369934082
rule 184
	 0.06304502487182617
rule 185
	 0.06536316871643066
rule 186
	 0.058175086975097656
rule 187
	 0.06926488876342773
rule 188
	 0.1292402744293213
rule 189
	 0.062432050704956055
rule 190
	 0.07839202880859375
rule 191
	 0.012982845306396484
rule 192
	 0.00967097282409668
rule 193
	 1.0988030433654785
rule 194
	 0.06521081924438477
rule 195
	 9.893154859542847
rule 196
	 0.008414983749389648
rule 197
	 0.05427098274230957
rule 198
	 0.05717802047729492
rule 199
	 0.055357933044433594
rule 200
	 0.0076580047607421875
rule 201
	 0.012023210525512695
rule 202
	 0.06798315048217773
rule 203
	 0.01167607307434082
rule 204
	 0.0077970027923583984
rule 205
	 0.008475065231323242
rule 206
	 0.05967307090759277
rule 207
	 0.008154869079589844
rule 208
	 0.06399059295654297
rule 209
	 0.06505799293518066
rule 210
	 1.040682315826416
rule 211
	 0.08469080924987793
rule 212
	 0.061270713806152344
rule 213
	 0.07012605667114258
rule 214
	 0.1096339225769043
rule 215
	 0.01001286506652832
rule 216
	 0.06030988693237305
rule 217
	 0.009869813919067383
rule 218
	 0.29715800285339355
rule 219
	 0.013760089874267578
rule 220
	 0.058279991149902344
rule 221
	 0.010712146759033203
rule 222
	 0.03295779228210449
rule 223
	 0.01018214225769043
rule 224
	 0.00860595703125
rule 225
	 19.760647296905518
rule 226
	 0.06753420829772949
rule 227
	 0.07141613960266113
rule 228
	 0.009190082550048828
rule 229
	 0.06753706932067871
rule 230
	 0.12091898918151855
rule 231
	 0.059455156326293945
rule 232
	 0.00868082046508789
rule 233
	 0.016736984252929688
rule 234
	 0.07507705688476562
rule 235
	 0.015402078628540039
rule 236
	 0.010314226150512695
rule 237
	 0.011841058731079102
rule 238
	 0.0683908462524414
rule 239
	 0.012744903564453125
rule 240
	 0.06637382507324219
rule 241
	 0.06178689002990723
rule 242
	 0.060775041580200195
rule 243
	 0.06935501098632812
rule 244
	 0.07609987258911133
rule 245
	 0.11420083045959473
rule 246
	 0.09661698341369629
rule 247
	 0.009140968322753906
rule 248
	 0.08502388000488281
rule 249
	 0.013747930526733398
rule 250
	 0.05302023887634277
rule 251
	 0.012362957000732422
rule 252
	 0.07380986213684082
rule 253
	 0.011536121368408203
rule 254
	 0.03669404983520508
rule 255
	 0.008320093154907227
rule75 took 31.90888786315918
rule89 took 30.4510018825531
rule45 took 29.741049766540527
rule101 took 29.457420825958252
rule149 took 28.464774131774902
rule135 took 26.81414794921875
rule30 took 26.5013108253479
rule86 took 26.123712062835693
rule169 took 22.293861865997314
rule225 took 19.760647296905518
rule195 took 9.893154859542847
rule153 took 9.347355127334595
rule102 took 8.820180892944336
rule60 took 8.379151105880737
rule105 took 6.224099159240723
rule150 took 5.020642042160034
rule90 took 4.750530004501343
rule165 took 4.555773973464966
rule110 took 1.3274178504943848
rule124 took 1.1915581226348877



&lt;Figure size 640x480 with 0 Axes&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">time_only</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">execution_time</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">time_only</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="s">"histogram"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_11_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_11_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_11_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_11_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>For the great majority of rules the PRT is almost constant up to size 50, so let’s just investigate the rules for which \(PRT &gt; 20\). Those would be</p>
<ul>
  <li>rule75</li>
  <li>rule89</li>
  <li>rule45</li>
  <li>rule101</li>
  <li>rule149</li>
  <li>rule135</li>
  <li>rule30</li>
  <li>rule86</li>
  <li>rule169</li>
  <li>rule225</li>
  <li>rule195</li>
</ul>

<p>Let’s plot them</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">width</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="mf">2.5</span><span class="o">*</span><span class="n">width</span><span class="p">))</span>
<span class="n">rules</span> <span class="o">=</span> <span class="p">[</span><span class="mi">75</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">149</span><span class="p">,</span> <span class="mi">135</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">195</span><span class="p">]</span>
<span class="k">for</span> <span class="n">ax</span><span class="p">,</span> <span class="n">rule</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">axes</span><span class="p">.</span><span class="n">flat</span><span class="p">,</span> <span class="n">rules</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="n">width</span><span class="p">,</span> <span class="n">steps</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="n">width</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_axis_off</span><span class="p">()</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'none'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">binary</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">rule</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="nf">bin</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">fontdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'fontsize'</span><span class="p">:</span><span class="mi">70</span><span class="p">})</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_13_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_13_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_13_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_13_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>Interestingly enough each pair can be considered as a single rule as the rules in each pair are simmetrical. While the first 8 rules have a similar behavior, showing a clear pattern, the last two rules are very different from the other. Let’s run them for a while and see if there is a pattern there.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#rule60 took 8.85617208480835
#rule195 took 8.831139087677002
#rule102 took 8.81187391281128
#rule153 took 8.585221767425537
</span>
<span class="c1">#rule105 took 5.552289962768555
#rule150 took 4.471593856811523
#rule165 took 4.46081280708313
#rule90 took 4.451854705810547
</span>
<span class="n">rule</span> <span class="o">=</span> <span class="mi">169</span>
<span class="n">size</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">steps</span> <span class="o">=</span> <span class="mi">40000</span>
<span class="n">data</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">steps</span><span class="p">,</span> <span class="n">test_recurrence</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exit_on_recurrence</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parts</span> <span class="o">=</span> <span class="nf">make_columns</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="nf">plot_run</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_16_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_16_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_16_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_16_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rule</span> <span class="o">=</span> <span class="mi">110</span>
<span class="n">size</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">steps</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="n">data110</span><span class="p">,</span> <span class="n">rec_indices</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">steps</span><span class="p">,</span> <span class="n">test_recurrence</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exit_on_recurrence</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">rec_indices</span><span class="p">)</span>
<span class="n">parts</span> <span class="o">=</span> <span class="nf">make_columns</span><span class="p">(</span><span class="n">data110</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">plot_run</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(-1, -1)
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_17_1-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_17_1-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_17_1-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_17_1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rule</span> <span class="o">=</span> <span class="mi">122</span>
<span class="n">size</span> <span class="o">=</span> <span class="mi">300</span>
<span class="n">steps</span> <span class="o">=</span> <span class="mi">200_000</span>
<span class="n">start</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
<span class="n">start</span><span class="p">[</span><span class="mi">45</span><span class="p">:</span><span class="mi">55</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">data122</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">steps</span><span class="p">,</span> <span class="n">test_recurrence</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exit_on_recurrence</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">with_init</span><span class="o">=</span><span class="n">start</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parts</span> <span class="o">=</span> <span class="nf">make_columns</span><span class="p">(</span><span class="n">data122</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">plot_run</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_19_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_19_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_19_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_19_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rule</span> <span class="o">=</span> <span class="mi">122</span>
<span class="n">size</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">steps</span> <span class="o">=</span> <span class="mi">20_00</span>
<span class="n">start</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
<span class="n">start</span><span class="p">[</span><span class="mi">45</span><span class="p">:</span><span class="mi">55</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">data122_closeup</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">generate</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">steps</span><span class="p">,</span> <span class="n">with_init</span><span class="o">=</span><span class="n">start</span><span class="p">)</span>
<span class="n">cols</span> <span class="o">=</span> <span class="nf">make_columns</span><span class="p">(</span><span class="n">data122_closeup</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">plot_run</span><span class="p">(</span><span class="n">cols</span><span class="p">)</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_21_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_21_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_21_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_21_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_run</span><span class="p">(</span><span class="n">data122_closeup</span><span class="p">[:</span><span class="mi">100</span><span class="p">])</span>
</code></pre></div></div>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_22_0-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_22_0-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/prt_files/poincare-recurrence-time_22_0-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/prt_files/poincare-recurrence-time_22_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>]]></content><author><name></name></author><category term="computation" /><category term="automata" /><summary type="html"><![CDATA[Exploring the asimptotical behavior of CA]]></summary></entry><entry><title type="html">TomTom Spark on Linux</title><link href="https://fedemengo.github.io/blog/2021/01/tomtom-spark-linux/" rel="alternate" type="text/html" title="TomTom Spark on Linux" /><published>2021-01-07T00:00:00+00:00</published><updated>2021-01-07T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2021/01/tomtom-spark-linux</id><content type="html" xml:base="https://fedemengo.github.io/blog/2021/01/tomtom-spark-linux/"><![CDATA[<p>I use a TomTom Spark 3 to track my sport activities and I love it. The only problem with that is that it’s a pretty old watch, TomTom discontinued the sport series so there is not so much support for it anymore.</p>

<p>I have the Cardio + Music version which allows to upload up ~4GB of audio to listen during my workouts. It’s great, in theory.</p>

<p>The truth is that I was never able to have the TomTom app upload the audio data to my watch. So, after spending some time trying to figure out the problem I found a solution.</p>

<p>The watch it’s just a usb! It’s only necessary to mount it</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/2021-01-07/mount-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/2021-01-07/mount-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/2021-01-07/mount-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/2021-01-07/mount.png" class="img-fluid centered" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>And put the audio files as well as the the <code class="language-plaintext highlighter-rouge">.m3u8</code> playlist in the folder <code class="language-plaintext highlighter-rouge">MySportsConnect/Music/</code></p>

<p>To do that I create a simple script that generates all the playlist. Let’s assume you have 3 folders <code class="language-plaintext highlighter-rouge">podcast</code>, <code class="language-plaintext highlighter-rouge">music</code>, <code class="language-plaintext highlighter-rouge">lectures</code> with audio inside each of them. You would just need to run the script at the same level of these folders. The script will create a <code class="language-plaintext highlighter-rouge">masterplaylist.m3u8</code> at the top level and a <code class="language-plaintext highlighter-rouge">.m3u8</code> playlist in each folder.</p>

<p><a href="https://ibiblio.org/mp3info/">mp3info</a> is require to extract the file duration</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>

<span class="nv">masterPL</span><span class="o">=</span><span class="s2">"masterplaylist.m3u8"</span>
<span class="nb">echo</span> <span class="s2">"#TTPLAYLIST"</span> <span class="o">&gt;</span> <span class="nv">$masterPL</span>

<span class="k">for </span><span class="nb">dir </span><span class="k">in</span> <span class="k">*</span><span class="p">;</span>
<span class="k">do
    if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">name</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$dir</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/^(.)/\U\1/g'</span><span class="si">)</span>
        <span class="nv">plFile</span><span class="o">=</span><span class="s2">"</span><span class="nv">$dir</span><span class="s2">/</span><span class="nv">$name</span><span class="s2">.m3u8"</span>
        <span class="nb">echo</span> <span class="s2">"#EXTM3U"</span> <span class="o">&gt;</span> <span class="nv">$plFile</span>
        <span class="nb">echo</span> <span class="s2">"#TTPLAYLIST_NAME:</span><span class="nv">$name</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$plFile</span>
        <span class="k">for </span>file <span class="k">in</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">/"</span><span class="k">*</span>.mp3<span class="p">;</span>
        <span class="k">do
        	</span><span class="nb">echo</span> <span class="s2">"#EXTINF:"</span><span class="si">$(</span>mp3info <span class="nt">-p</span> <span class="s2">"%S"</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span><span class="si">)</span><span class="s2">","</span><span class="k">${</span><span class="nv">file</span><span class="p">/</span><span class="s2">"</span><span class="nv">$dir</span><span class="s2">/"</span><span class="p">/</span><span class="k">}</span><span class="s2">""</span>
        	<span class="nb">echo</span> <span class="k">${</span><span class="nv">file</span><span class="p">/</span><span class="s2">"</span><span class="nv">$dir</span><span class="s2">/"</span><span class="p">/</span><span class="k">}</span><span class="p">;</span>
        <span class="k">done</span> <span class="o">&gt;&gt;</span> <span class="nv">$plFile</span>

        <span class="nb">echo</span> <span class="s2">"#NAME:</span><span class="nv">$name</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$masterPL</span>
        <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$plFile</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$masterPL</span>
    <span class="k">fi
done</span></code></pre></figure>

<p>Finally you can just copy everything over to <code class="language-plaintext highlighter-rouge">MySportsConnect/Music/</code>. Beware that the copying process might terminates rather quickly. In my case the umount process took a while, because the files were still syncing.</p>]]></content><author><name></name></author><category term="unix" /><summary type="html"><![CDATA[Load audio files using the command line]]></summary></entry><entry><title type="html">SSH Local Forwarding</title><link href="https://fedemengo.github.io/blog/2020/11/ssh-local-forwarding/" rel="alternate" type="text/html" title="SSH Local Forwarding" /><published>2020-11-04T00:00:00+00:00</published><updated>2020-11-04T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2020/11/ssh-local-forwarding</id><content type="html" xml:base="https://fedemengo.github.io/blog/2020/11/ssh-local-forwarding/"><![CDATA[<p>Earlier todays I was configuring <a href="https://rclone.org/">rclone</a> on my raspberry to backup my document on Google Drive. As I was giving permission to rclone to access Drive apis I was asked this</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/2020-11-04/prompt-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/2020-11-04/prompt-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/2020-11-04/prompt-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/2020-11-04/prompt.png" class="img-fluid centered" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>I’m ssh-ed in the raspberry, which is running a very light distribution of raspbian without a X11 server, so it doesn’t have a GUI. But I needed to access the url in order to login to my google account and allow the app access to my account.</p>

<p>I tried connecting on my laptop to <code class="language-plaintext highlighter-rouge">http://raspberry-address:53682/auth?state=2EL7gU5-kcVEAMC2w6QHPg</code> but of course it wasn’t working, I tried to <strong>curl</strong> and <strong>wget</strong> <code class="language-plaintext highlighter-rouge">http://127.0.0.1:53682/auth?state=2EL7gU5-kcVEAMC2w6QHPg</code>, a step in the right direction but not quite (I used this to authenticate other app that just required me to access the url).</p>

<p>Then I tried a ssh trick that I used in other occasion <code class="language-plaintext highlighter-rouge">ssh -X blahblah</code> but of course there was no X11 server to forward. That’s when I remembered reading about <strong>ssh forwarding</strong>. I never thought I would use it in the future but here I was.</p>

<h4 id="ssh-local-forwarding">SSH Local Forwarding</h4>

<p>The idea is straightforward, you can forward all your local request on a specific port to another port on your remote machine.
For example if I were to <code class="language-plaintext highlighter-rouge">ssh -L 12345:127.0.0.1:54321 user@remote-address</code> I could make request on my local machine (using browser or cli) to <code class="language-plaintext highlighter-rouge">localhost:12345</code> and ssh would forward those request to <code class="language-plaintext highlighter-rouge">127.0.0.1:54321</code> on the remote machine and forward the response back to my machine.</p>

<p>In my case I was able to authenticate my app by using <code class="language-plaintext highlighter-rouge">ssh -L 12345:127.0.0.1:53682 user@raspberry-address</code> and the accessing <code class="language-plaintext highlighter-rouge">http://127.0.0.1:12345/auth?state=2EL7gU5-kcVEAMC2w6QHPg</code> with my browser.</p>

<p>Another useful feature that ssh provides on top of the most famous <code class="language-plaintext highlighter-rouge">sftp</code> and <code class="language-plaintext highlighter-rouge">scp</code></p>]]></content><author><name></name></author><category term="networking" /><category term="unix" /><summary type="html"><![CDATA[Tunneling through SSH]]></summary></entry><entry><title type="html">Designing an efficient webcrawler</title><link href="https://fedemengo.github.io/blog/2019/09/web-crawler/" rel="alternate" type="text/html" title="Designing an efficient webcrawler" /><published>2019-09-17T00:00:00+00:00</published><updated>2019-09-17T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2019/09/web-crawler</id><content type="html" xml:base="https://fedemengo.github.io/blog/2019/09/web-crawler/"><![CDATA[<h2 id="terminology">Terminology</h2>

<ul>
  <li>Web crawlers generally start from a <strong>seed</strong> web page and can collect data form many more pages by following all outgoing links <!--more--></li>
  <li>Web crawlers can be <strong>exhaustive</strong> or <strong>topical/focused</strong> depending on the pages they will inspect (follow one topic, follow pages newer than a given data and so on..)</li>
  <li>A crawling strategy can be selective on the maximum number of pages to fetch: <strong>short</strong> vs <strong>long crawls</strong></li>
</ul>

<h2 id="architecture">Architecture</h2>

<h3 id="components">Components</h3>

<ul>
  <li>Frontier</li>
  <li>Fetcher</li>
  <li>Parser
    <ul>
      <li>url extractor</li>
      <li>url filtering</li>
      <li>url prioritizer</li>
    </ul>
  </li>
  <li>Storage</li>
</ul>

<p>In addition to those component, that consists of the bare minium for a simple crawler,  a distributed web crawler will require  a url distributor that will take care of assigning url to each crawler (right after extracting them) based on on the respective locality.</p>

<h4 id="frontier">Frontier</h4>

<p>A <strong>frontier/open-list</strong> (list of unvisited urls) is initialized with a seed and store all the unvisited urls. Can be an in-memory data structure for small crawlers while it usually stores the urls on disk for large scale systems. It’s necessary to avoid adding duplicates to the frontier, so a separate hash-table or Bloom filter can be used to avoid the problem. When the frontier reaches it’s maximum capacity, only <strong>one</strong> new url can be added from the current page. Urls extracted from a page are generally assigned a score depending on their importance according to the crawling strategy.</p>

<p>It may happens that the frontier contains many urls that point to the same or similar page, this problem is referred to as the <strong>spider-trap</strong>. In this case it’s reasonable to only accept \(k\) urls for the same domain every \(n\) urls processed.crawcraw</p>

<p>When urls are assigned a crawling priority it useful to implement the frontier as priority queue. The problem when using a disk-based priority queue is that is necessary to rearrange elements periodically and that would results in many disk seeks, consequentially limiting the number of insertion per second.</p>

<p>A possible solution is to discretize the priority and have as many frontier as interval of priority.</p>

<h4 id="fetching">Fetching</h4>

<p>An http client is necessary to fetch a webpage. It needs to be configured with a timeout (to avoid wasting waiting for a response too long), it has to to inspect the header of page (for redirection, last modified date and so on). Before fetching a page from a new host, the crawler should check for a <code class="language-plaintext highlighter-rouge">robots.txt</code> file that inform the crawler to skip specific urls.</p>

<p>In a distributed crawler it’s important to avoid issuing multiple overlapping request to the same server (denial-of-service), to do this one solution could be to map a domain to a single crawling unit. Another way to avoid sending too many requests consists on adding a delay before requesting another page form the same domain (for example 10 times the time it took to download the last page); in real implementation there is generally just one frontier per worker and many backend frontiers (in the url distributor), each one assigned to a specific domain.</p>

<p>Other data-structure used to improved the performances of a crawler are the robot.txt cache and the DNS cache.</p>

<h4 id="parsing">Parsing</h4>

<p>A <strong>crawling loop</strong> fetch the next url in the frontier, extract application specific data and add the page’urls to the frontier.</p>

<p>Before adding new urls to a page, such url need to be <strong>canonicalized</strong> meaning it’s necessary to transform the url applying certain criteria, the key is applying them consistently</p>

<ul>
  <li>Convert protocol and hostname to lowercase</li>
  <li>Remove anchor or references</li>
  <li>Perform url-encoding of special characters</li>
  <li>Add trailing <code class="language-plaintext highlighter-rouge">/</code> when necessary (<code class="language-plaintext highlighter-rouge">x.y</code> and <code class="language-plaintext highlighter-rouge">x.y/</code>)</li>
  <li>Remove default web pages (<code class="language-plaintext highlighter-rouge">x.y/</code> and <code class="language-plaintext highlighter-rouge">x.y/index.html</code>)</li>
  <li>Resolve local path</li>
  <li>Leave port number unless is port <code class="language-plaintext highlighter-rouge">80</code> (default)</li>
  <li>Known mirrors</li>
  <li>Consider limiting the url size to 128/256 characters</li>
</ul>

<p>When extracting data from a page, it’s a good practice to <strong>stoplist</strong> (remove common stop works) and <strong>stem</strong> (conflate words to a common root).</p>

<p>In the case of a distributed crawler that partitions the url space among each replica, it’s important to have a mean to send an extracted url to the appropriate instance: this can be achieved with p2p communication (consistent hashing/DHT or using a central source of urls distribution)</p>

<h2 id="algorithms">Algorithms</h2>

<h3 id="naive-best-first-crawler">Naive Best-First crawler</h3>

<p>Each fetched page is represented as list of words weighted by their frequency, it then computes the similarity between the page and the description provided by the user. A similarity function can be</p>

\[sim(q, p) = \dfrac{Vq \cdot{ Vp}}{\mid\mid Vq\mid\mid \cdot \mid\mid Vq \mid\mid}\]

<p>Where \(Vq, Vp\) are the term frequency vector for query and fetched page and \(\mid\mid v \mid\mid\) is the Euclidean norm of the vector \(v\)</p>

<h3 id="sharksearch">SharkSearch</h3>

<p>This algorithm uses the anchor-text, anchor context and inherited scores to assigned a more refined score by also keeping track of the value of the pages on a path (if such pages are not important it stops crawling down the path, a depth bound is also used as upper bound). The following function can be used</p>

\[score(url) = \gamma \cdot inherited(url) + (1-\gamma) \cdot neighborhood(url)\]

<p>where \(\gamma &lt; 1\), \(inherited\) is obtain from the ancestor of the page and \(neighborhood\) is calculated using anchor-text and anchor context.</p>

<p>The \(inherited\) score is computed as</p>

\[inherited(url) =
\begin{cases}
    \delta \cdot sim(q, p) &amp; \mbox{if } sim(q, p) &gt; 0 \\
    \delta \cdot inherited(p) &amp; \mbox{otherwise}
\end{cases}\]

<p>where \(\delta &lt; 1\), \(q\) is the query and \(p\) is the page from which the url is extracted.</p>

<p>while the \(neighborhood\) is calculate as</p>

\[neighborhood(url) = \beta \cdot anchor(url) + (1-\beta) \cdot context(url)\]

<p>where \(\beta &lt; 1\), \(anchor(url) = sim(q, anchorText)\) and</p>

\[context(url) =
\begin{cases}
    1 &amp; \mbox{if } anchor(url) &gt; 0 \\
    sim(q, augContext) &amp; \mbox{otherwise}
\end{cases}\]

<p>The algorithms is defined with as a parametrized function \(SharkSearch(d, \gamma, \delta, \beta)\)</p>

<h3 id="advanced">Advanced</h3>

<p>Other advanced crawler are <strong>focused crawlers, context focused crawler</strong> and <strong>InfoSpiders</strong></p>

<h2 id="page-importance">Page importance</h2>

<ul>
  <li>Keyword in document: depends on the number and frequency of keywords in the query that the page contains</li>
  <li>Similarity to a query: generally used when the query is a relatively long text</li>
  <li>Similarity to seed page: calculated using the similarity function between all seed pages combined and the crawled page</li>
  <li>Classifier score: either a boolean or continuos relevance score assigned to each page using a trained classifier</li>
  <li>Retrieval system rank: \(N\) different crawlers (namely using different strategy) are started form the same seeds and allowed to crawl $P\(pages, once the\)N \cdot P$$ have been crawled, they get ranked against the initial query using some retrieval system.</li>
  <li>Link bases popularity: PageRank, HITS or simpler version such as using the number of in-links to the crawled page</li>
</ul>

<h3 id="gotchastips">Gotchas/Tips</h3>

<ul>
  <li>Consistent hashing to partition the urls</li>
  <li>Keep seen-urls in a disk-based hash table that store them sparsely and use, for example, the first \(k\) bit of the hash to identify the disck block.</li>
</ul>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://dollar.biz.uiowa.edu/~gpant/Papers/crawling.pdf">Crawling the Web</a></li>
  <li><a href="http://infolab.stanford.edu/~olston/publications/crawling_survey.pdf">Web Crawling</a></li>
</ul>]]></content><author><name></name></author><category term="system-design" /><summary type="html"><![CDATA[What's powering every search engine?]]></summary></entry><entry><title type="html">Limit process memory usage on Linux</title><link href="https://fedemengo.github.io/blog/2019/06/limit-mem-usage/" rel="alternate" type="text/html" title="Limit process memory usage on Linux" /><published>2019-06-25T00:00:00+00:00</published><updated>2019-06-25T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2019/06/limit-mem-usage</id><content type="html" xml:base="https://fedemengo.github.io/blog/2019/06/limit-mem-usage/"><![CDATA[<p>Control groups allow to limit the resources usage of a collection of processes.<!--more--></p>

<h2 id="configuration">Configuration</h2>

<p>To use control groups on Manjaro, it’s necessary to install the aur package <code class="language-plaintext highlighter-rouge">libcgroup</code> with <code class="language-plaintext highlighter-rouge">yay -S libcgroup</code></p>

<p>Now let’s create a control groups that limits the memory usage to \(2\) gb of physical memory and \(2\) gb of virtual (swap) memory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo cgcreate -t USERNAME:USERNAME -a USERNAME:USERNAME -g memory:/CGROUP_NAME
$ echo $((2 * 1024 * 1024 * 1024)) &gt; /sys/fs/cgroup/memory/CGROUP_NAME/memory.limit_in_bytes
$ echo $((2 * 1024 * 1024 * 1024)) &gt; /sys/fs/cgroup/memory/CGROUP_NAME/memory.memsw.limit_in_bytes
</code></pre></div></div>

<p>Running a process using the control groups is as easy as</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cgexec -g memory:CGROUP_NAME PROCESS
</code></pre></div></div>

<h2 id="example">Example</h2>

<p>To demonstrate the effectiveness of using <code class="language-plaintext highlighter-rouge">cgroups</code> I run the following program first with and without a control group</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Without control group</strong></p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/2019-06-25/crash.svg-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/2019-06-25/crash.svg-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/2019-06-25/crash.svg-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/2019-06-25/crash.svg" class="img-fluid centered" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>Although here the program seems to running just fine, it consumed all the memory on my machine (\(8 GB\)) and I wasn’t able to stop it with a <code class="language-plaintext highlighter-rouge">CTRL^C</code>. I had to wait for the program to crash.</p>

<p><strong>With control group</strong></p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/2019-06-25/safe.svg-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/2019-06-25/safe.svg-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/2019-06-25/safe.svg-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/2019-06-25/safe.svg" class="img-fluid centered" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

<p>In this case my machine is still responsive and it’s clear how the memory usage is capped. The control group seems to limiting the memory usage somewhere between 4 to 5 gb. The control groups is configured to allow 2 gb of physical memory and up to 10 gb of virtual memory. I guess this is the reason why the actual limit seems so strange.</p>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[How to use cgroups]]></summary></entry><entry><title type="html">Scalable Byzantine Consensus via Hardware-assisted Secrete Sharing</title><link href="https://fedemengo.github.io/blog/2019/01/FastBFT/" rel="alternate" type="text/html" title="Scalable Byzantine Consensus via Hardware-assisted Secrete Sharing" /><published>2019-01-22T00:00:00+00:00</published><updated>2019-01-22T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2019/01/FastBFT</id><content type="html" xml:base="https://fedemengo.github.io/blog/2019/01/FastBFT/"><![CDATA[<p><a href="https://arxiv.org/pdf/1612.04997v1.pdf">Scalable Byzantine Consensus via Hardware-assisted Secrete Sharing</a></p>

<p>The author of this paper described <strong>FastBFT</strong> a new BFT protocols, highly scalable that achieve better performances than any other BFT protocols. The protocol was designed by studying the weakness of other popular protocols<!--more--> such as <a href="http://pmg.csail.mit.edu/papers/osdi99.pdf">PBFT</a>, <a href="https://www.cs.utexas.edu/~lorenzo/papers/kotla07Zyzzyva.pdf">Zyzzyva</a>, <a href="http://web.cs.ucdavis.edu/~peisert/research/2014-OPODIS-BChain.pdf">BChain</a> and <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.513.2850&amp;rep=rep1&amp;type=pdf">MiniBFT</a> to improve upon them. There are several components that characterize the paper.</p>

<p>The protocol is an <strong>hybrid</strong> protocol that require hardware assistance (so it only require $2f+1$ nodes in the network) based on a optimistic paradigm (requests are executed before reaching the agreement) that require only $f+1$ active replica to agree and execute a transaction while the other $f$ passive replicas are updates by the network.</p>

<h2 id="message-aggregation">Message aggregation</h2>

<p>To reach the agreement in BFT protocols, $O(n^2)$ messages are required since every replica $S_i$ multicast a commit message (in the general case) to all other active replicas in the network. The $O(n^2)$ message complexity represent the main bottleneck in PBFT.</p>

<p>During the commit phase of the protocol, each replica sends a commit message directly to the primary instead of multicasting the message to the network. To reduce the overhead of message aggregation the authors use <strong>secret sharing</strong> instead of a classical multisignatures approach.</p>

<p>To implement secret sharing, an additional phase of <code class="language-plaintext highlighter-rouge">pre-processing</code> it’s necessary to set up the “secret shares”.</p>

<h3 id="pre-processing">Pre-processing</h3>

<p>In this phase the primary/leader $S_p$ generates a set of random secrets and publish a cryptographic hash of each of them (each secret will be bound to a single requests in the <code class="language-plaintext highlighter-rouge">prepare</code> phase). Then $S_p$ creates $f+1$ shares (and its hash as well) of the message and send one share to each active replica.</p>

<p>In the commit phase, every replica will reveals its share to the primary that will reconstruct the secret (if it receives enough valid shares). The secret is the multicasted by $S_p$ to all the replicas that can verify it (they verify that the hash previously bound to the request is actually correct).</p>

<p>To ensure that $S_p$ doesn’t impersonate any other $S_i$ the generation of secrete, hash, shares and binding happens inside the <strong>TEE</strong> (Trusted Execution Environment) and each secret is bound to a monotonic counter (as well as a single request).</p>

<h2 id="communication-topology">Communication topology</h2>

<p>To further improve the exchange of messages, the network is organized (by the primary) in a balance tree structure rooted at $S_p$. Instead of receiving all $n$ messages from the replicas, the primary take advantage of the tree topology that will allow it to receive a constant number of messages (equal to the branching factor of each node, in the simplest case $n = 2$).</p>

<h3 id="failure-detection">Failure detection</h3>

<p>Crashes are detected by timeout while Byzantine faults are detected by verifying shares: when a node $S_i$ receive a message from one of its children its check whether the aggregate shares is valid. If the shares received are wrong, the node will directly send a <code class="language-plaintext highlighter-rouge">SUSPECT</code> message to its parent (hence aborting the transaction), the message will eventually reach the primary that will be in charge of rearranging the network by putting the suspected faulty node in one of the leaves.</p>]]></content><author><name></name></author><category term="paper-review" /><category term="BFT" /><summary type="html"><![CDATA[Fastest and most scalable BFT protocol]]></summary></entry><entry><title type="html">Linux Commands</title><link href="https://fedemengo.github.io/blog/2018/12/linux-tips/" rel="alternate" type="text/html" title="Linux Commands" /><published>2018-12-11T00:00:00+00:00</published><updated>2018-12-11T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2018/12/linux-tips</id><content type="html" xml:base="https://fedemengo.github.io/blog/2018/12/linux-tips/"><![CDATA[<p>The following content was create on Manjaro Linux</p>

<h3 id="systemd">systemd</h3>

<!--more-->

<ul>
  <li>List all service unit files on the systems with <code class="language-plaintext highlighter-rouge">systemctl list-unit-files -at service</code></li>
  <li>List all running services with <code class="language-plaintext highlighter-rouge">systemctl list-units -t service --state running</code></li>
  <li><code class="language-plaintext highlighter-rouge">systemctl cat SERVICE_NAME</code> will cat the service file and give insight on the file structure (dependencies, what happens if service fails)</li>
  <li>To check whether a service is active just use <code class="language-plaintext highlighter-rouge">systemctl is-active SERVICE_NAME</code></li>
  <li>It’s also possible to prevent services from running by masking them with <code class="language-plaintext highlighter-rouge">sudo systemctl mask SERVICE_NAME</code> (unmasking is done in the same way)</li>
</ul>

<h3 id="at">at</h3>

<p>Install at with <code class="language-plaintext highlighter-rouge">pacman -S at</code> and enable the daemon with <code class="language-plaintext highlighter-rouge">sudo systemclt start atd</code> and <code class="language-plaintext highlighter-rouge">sudo systemclt enable atd</code></p>

<p>Create the first job by specifying the time when the job should execute and then typing the actual commands</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ at now +1min
at&gt; mkdir /home/backup
at&gt; cp -r ~/ /home/backup/
</code></pre></div></div>
<p>Finally type CTRL + D to save</p>

<p>From the <code class="language-plaintext highlighter-rouge">man</code> page, <strong>at</strong> usage is very simple</p>
<ul>
  <li>You can inspect at’s queue with <code class="language-plaintext highlighter-rouge">atq</code></li>
  <li>With <code class="language-plaintext highlighter-rouge">at -c JOB_NUMBER</code> you can inspect the command environment and other useful information</li>
  <li>To remove a job just use <code class="language-plaintext highlighter-rouge">atrm JOB_NUMBER</code></li>
  <li>To job can be create from a file with <code class="language-plaintext highlighter-rouge">at -f FILE_NAME</code></li>
</ul>

<p>It’s also possible to create <code class="language-plaintext highlighter-rouge">batch</code> that are multiple jobs executed the system average drop is below \(0.8\)</p>

<h3 id="cron">cron</h3>

<p>User cron jobs are specific to and can be managed by a user, are stored in <code class="language-plaintext highlighter-rouge">/var/spool/cron/USER/</code>. While system cron job are sore in <code class="language-plaintext highlighter-rouge">/etc/cron.d</code></p>

<p>The form of the file is the same <code class="language-plaintext highlighter-rouge">MINUTE HOUR DAY MONTH DAY_OF_WEEK command_to_run</code>
The value can be listed <code class="language-plaintext highlighter-rouge">V1,V2,V3</code>, ranges can be used <code class="language-plaintext highlighter-rouge">V1-V5</code>, step value are valid <code class="language-plaintext highlighter-rouge">*/10</code> (ranges and step value can be combine <code class="language-plaintext highlighter-rouge">1-9/2</code>). Minutes are in the range \(1-59\), hours in \(0-23\), days in \(1-31\), month \(1-12\) and day of the week in the range \(0-6\) with \(0\) being sunday.</p>

<p>The command to manage cron jobs is <code class="language-plaintext highlighter-rouge">crontab</code></p>

<p>To create a cronjob that has to be run by root just use <code class="language-plaintext highlighter-rouge">sudo crontab -e</code> to add a new entry, and before specifying the command, indicate the user that should run it <code class="language-plaintext highlighter-rouge">M H D MONTH DW USER command</code>.</p>

<p>To run a command on a hourly/daily/weekly/monthly basis it’s sufficient to place the command in <code class="language-plaintext highlighter-rouge">etc/cron.FREQUENCE/</code></p>

<p>As user administrator it’s possible to specifically allow/deny a user to create <code class="language-plaintext highlighter-rouge">cron</code> and <code class="language-plaintext highlighter-rouge">at</code> jobs by adding the desired username to <code class="language-plaintext highlighter-rouge">etc/cron.deny</code> or <code class="language-plaintext highlighter-rouge">atc/cron.allow</code> (same format for <code class="language-plaintext highlighter-rouge">at</code>)</p>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[systemd, at, cron]]></summary></entry><entry><title type="html">K-way merge</title><link href="https://fedemengo.github.io/blog/2018/11/kway-merge/" rel="alternate" type="text/html" title="K-way merge" /><published>2018-11-14T00:00:00+00:00</published><updated>2018-11-14T00:00:00+00:00</updated><id>https://fedemengo.github.io/blog/2018/11/kway-merge</id><content type="html" xml:base="https://fedemengo.github.io/blog/2018/11/kway-merge/"><![CDATA[<p>Given \(K\) sorted arrays (or any sequential container) of size \(N\), merge them into one sorted array.</p>

<h2 id="naive-solution">Naive solution</h2>

<p>A naive solution would require to inspect the first element of all \(K\) array to find the minimum<!--more-->. This process would be repeated for all \(N \cdot K\) values, giving a total complexity of \(O(N\cdot K^2)\)</p>

<h2 id="improved-solution">Improved solution</h2>

<p>Another approach consist of creating the new array with all \(N\cdot K\) value and then sort it, with a running time of \(O((N\cdot K)\log (N\cdot K))\). The problem with this is that we don’t exploit the fact that the arrays are already sorted.</p>

<h2 id="optimal-solution">Optimal solution</h2>

<p>An optimal solution require to quickly find the next element in the sequence among other \(K\) elements. For this reason it’s possible to use a heap of \(K\) elements that “always” stores the first element of each \(K\) arrays. When we remove the minimum value, let’s say from array \(i\), we need to push in the heap the next element from the same array \(i\).</p>

<p>In the following example the algorithm is used to merge \(K\) linked list of size \(N\)</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="nf">kway_merge</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">single_linked</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">lists</span><span class="p">,</span> <span class="n">single_linked</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">res</span><span class="p">){</span>

    <span class="n">binary_heap</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">max_heap</span><span class="p">([](</span><span class="kt">int</span> <span class="n">k1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k2</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">k1</span> <span class="o">&gt;</span> <span class="n">k2</span><span class="p">;});</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lists</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">lists</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()){</span>
            <span class="n">max_heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">lists</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">front</span><span class="p">(),</span> <span class="n">i</span><span class="p">);</span>
            <span class="n">lists</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pop_front</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// keep a heap with the next lists.size() == K, larger elements</span>
    <span class="k">while</span><span class="p">(</span><span class="n">max_heap</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>     <span class="c1">// N * K</span>
        <span class="k">auto</span> <span class="n">curr_top</span> <span class="o">=</span> <span class="n">max_heap</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">max_heap</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>                     <span class="c1">// LOG K</span>

        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">curr_top</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">list_idx</span> <span class="o">=</span> <span class="n">curr_top</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>

        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>

        <span class="k">if</span><span class="p">(</span><span class="n">lists</span><span class="p">[</span><span class="n">list_idx</span><span class="p">].</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>    <span class="c1">// I should add a new element from the next list</span>
            <span class="n">max_heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">lists</span><span class="p">[</span><span class="n">list_idx</span><span class="p">].</span><span class="n">front</span><span class="p">(),</span> <span class="n">list_idx</span><span class="p">);</span>   <span class="c1">// LOG K</span>
            <span class="n">lists</span><span class="p">[</span><span class="n">list_idx</span><span class="p">].</span><span class="n">pop_front</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Total complexity O(N * K log K)</span>

<span class="p">}</span></code></pre></figure>

<p>This particular implementation of the heap allows to store a <code class="language-plaintext highlighter-rouge">key-value</code> element instead of the classic heap where the value is also the key. The <code class="language-plaintext highlighter-rouge">key</code> represent the actual value of the element and the <code class="language-plaintext highlighter-rouge">value</code> represent the index of the array the item is from.</p>

<p>It’s necessary to fill the heap with the first elements of each array, this operations takes \(\sum\limits_i^K \log i = O(K \log K)\) and then, the while loop it’s going to perform \(N \cdot K\) iteration during which the minimum/maximum value is removed from the heap and new value is pushed, so the time complexity would be \(O(N\cdot K \log K)\).</p>

<p>Overall the total running time is going to be \(O(K \log K) + O(N\cdot K \log K) = O(N\cdot K \log K)\), the main improvement is achieved by keeping only \(K\) values in the heap.</p>

<h2 id="optimal-solution-variant">Optimal solution (variant)</h2>

<p>Another similar solution consists in merging two lists at the time until we end up with just one list, the result. In this case, with the same assumption as before, we are performing \(\dfrac{K}{2}, \dfrac{K}{4}, \dots, 2 = \log_{2}K\) merges of \(N, 2 \cdot N, \dots, 2^{\log_{2}K} \cdot N = K \cdot N\) elements. This solution has the same running time of \(O(N\cdot K \log K)\)</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">Node</span> <span class="nf">kwayMerge</span><span class="o">(</span><span class="nc">Node</span><span class="o">[]</span> <span class="n">lists</span><span class="o">){</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

    <span class="k">for</span><span class="o">(</span><span class="nc">Node</span> <span class="nl">n:</span> <span class="n">lists</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">while</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="nc">Node</span> <span class="n">y</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="nc">Node</span> <span class="n">z</span> <span class="o">=</span> <span class="n">merge</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">z</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<details>
<summary><a>Expand</a> merge routine</summary>


<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
    <span class="nc">Node</span> <span class="n">next</span><span class="o">;</span>

    <span class="nc">Node</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">val</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nc">Node</span> <span class="nf">merge</span><span class="o">(</span><span class="nc">Node</span> <span class="n">l1</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">l2</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="n">l1</span><span class="o">;</span>

    <span class="nc">ListNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ListNode</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
    <span class="nc">ListNode</span> <span class="n">next</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>

    <span class="k">while</span><span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">l2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">l2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span> <span class="o">?</span> <span class="n">l1</span> <span class="o">:</span> <span class="n">l2</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l2</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="n">l1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">root</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

</details>]]></content><author><name></name></author><category term="puzzle" /><category term="cpp" /><category term="java" /><summary type="html"><![CDATA[Merge K sorted container]]></summary></entry></feed>